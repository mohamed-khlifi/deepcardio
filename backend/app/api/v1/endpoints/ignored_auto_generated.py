from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from backend.app.core.deps import get_db
from backend.app.core.deps_doctor import get_current_doctor
from backend.app.models.patient_ignored_auto_generated import PatientIgnoredAutoGeneratedItem
from backend.app.models.patient_ignored_auto_generated_schema import PatientIgnoredAutoGeneratedItemCreate, PatientIgnoredAutoGeneratedItemResponse
from backend.app.models.doctor_patient import DoctorPatient
from typing import List

ignored_router = APIRouter()

@ignored_router.post("/ignored-auto-generated", response_model=PatientIgnoredAutoGeneratedItemResponse)
def mark_item_as_ignored(
    data: PatientIgnoredAutoGeneratedItemCreate,
    db: Session = Depends(get_db),
    doctor = Depends(get_current_doctor)
):
    """
    Mark an auto-generated item as ignored by the user.
    This prevents the item from being re-added by auto_populate_patient_summary_data.
    """
    print(f"[DEBUG] mark_item_as_ignored: Received request - patient_id={data.patient_id}, doctor_id={doctor.id}, entity_type={data.entity_type}, catalog_item_key='{data.catalog_item_key}'")
    
    # Verify the doctor has access to this patient
    link = db.query(DoctorPatient).filter_by(
        doctor_id=doctor.id, 
        patient_id=data.patient_id
    ).first()
    
    if not link:
        print(f"[DEBUG] mark_item_as_ignored: Access denied - doctor {doctor.id} not assigned to patient {data.patient_id}")
        raise HTTPException(status_code=403, detail="This patient is not assigned to you")
    
    # Check if already ignored
    existing = db.query(PatientIgnoredAutoGeneratedItem).filter(
        PatientIgnoredAutoGeneratedItem.patient_id == data.patient_id,
        PatientIgnoredAutoGeneratedItem.doctor_id == doctor.id,
        PatientIgnoredAutoGeneratedItem.entity_type == data.entity_type,
        PatientIgnoredAutoGeneratedItem.catalog_item_key == data.catalog_item_key
    ).first()
    
    if existing:
        print(f"[DEBUG] mark_item_as_ignored: Item already ignored, returning existing")
        return existing
    
    # Create new ignored item
    ignored_item = PatientIgnoredAutoGeneratedItem(
        patient_id=data.patient_id,
        doctor_id=doctor.id,
        entity_type=data.entity_type,
        catalog_item_key=data.catalog_item_key
    )
    
    db.add(ignored_item)
    db.commit()
    db.refresh(ignored_item)
    
    print(f"[DEBUG] mark_item_as_ignored: Successfully created ignored item with ID {ignored_item.id}")
    return ignored_item

@ignored_router.get("/ignored-auto-generated/{patient_id}", response_model=List[PatientIgnoredAutoGeneratedItemResponse])
def get_ignored_items(
    patient_id: int,
    db: Session = Depends(get_db),
    doctor = Depends(get_current_doctor)
):
    """
    Get all ignored auto-generated items for a specific patient.
    """
    print(f"[DEBUG] get_ignored_items: Request for patient_id={patient_id}, doctor_id={doctor.id}")
    
    # Verify the doctor has access to this patient
    link = db.query(DoctorPatient).filter_by(
        doctor_id=doctor.id, 
        patient_id=patient_id
    ).first()
    
    if not link:
        print(f"[DEBUG] get_ignored_items: Access denied - doctor {doctor.id} not assigned to patient {patient_id}")
        raise HTTPException(status_code=403, detail="This patient is not assigned to you")
    
    ignored_items = db.query(PatientIgnoredAutoGeneratedItem).filter(
        PatientIgnoredAutoGeneratedItem.patient_id == patient_id,
        PatientIgnoredAutoGeneratedItem.doctor_id == doctor.id
    ).all()
    
    print(f"[DEBUG] get_ignored_items: Found {len(ignored_items)} ignored items for patient {patient_id}")
    for item in ignored_items:
        print(f"[DEBUG] get_ignored_items: - entity_type={item.entity_type}, catalog_item_key='{item.catalog_item_key}'")
    
    return ignored_items

@ignored_router.delete("/ignored-auto-generated/{ignored_item_id}")
def unignore_item(
    ignored_item_id: int,
    db: Session = Depends(get_db),
    doctor = Depends(get_current_doctor)
):
    """
    Remove an item from the ignored list, allowing it to be auto-generated again.
    """
    ignored_item = db.query(PatientIgnoredAutoGeneratedItem).filter(
        PatientIgnoredAutoGeneratedItem.id == ignored_item_id,
        PatientIgnoredAutoGeneratedItem.doctor_id == doctor.id
    ).first()
    
    if not ignored_item:
        raise HTTPException(status_code=404, detail="Ignored item not found")
    
    db.delete(ignored_item)
    db.commit()
    
    return {"message": "Item removed from ignored list"}
