# File: backend/app/api/v1/endpoints/patient.py
# NOTE: this completely replaces the previous file.

from fastapi import APIRouter, Depends, HTTPException, Query
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from datetime import date
from typing import List, Optional, Union

from core.deps import get_db
from core.deps_doctor import get_current_doctor

from models.doctor_patient import DoctorPatient
from models.patient import Patient
from models.doctor import Doctor

from models.patient_schema import (
    PatientResponse,
    Demographics,
    ContactInfo,
    SocialInfo,
    Symptom,
    PersonalHistory,
    VitalSign,
    PatientTest,
    FollowUpAction,
    Recommendation,
    Referral,
    Risk,
    LifeStyleAdvice,
    PresumptiveDiagnosis,
    TestToOrder,
    PatientCreate,
    PatientBasic,
)

from services.patient_service import (          # unchanged – full list omitted for brevity
    get_patient_by_id,
    get_patient_symptoms,
    get_patient_personal_history,
    get_patient_vital_signs,
    get_patient_tests,
    get_follow_up_actions_from_symptoms,
    get_follow_up_actions_from_personal_history,
    get_follow_up_actions_from_tests,
    get_follow_up_actions_from_vital_signs,
    get_recommendations_from_symptoms,
    get_recommendations_from_vital_signs,
    get_recommendations_from_personal_history,
    get_recommendations_from_tests,
    get_referrals_from_symptoms,
    get_referrals_from_personal_history,
    get_referrals_from_tests,
    get_referrals_from_vital_signs,
    get_risks_from_symptoms,
    get_risks_from_personal_history,
    get_risks_from_tests,
    get_risks_from_vital_signs,
    get_lifestyle_advices_from_symptoms,
    get_lifestyle_advices_from_personal_history,
    get_lifestyle_advices_from_vital_signs,
    get_lifestyle_advices_from_tests,
    get_presumptive_diagnoses_from_symptoms,
    get_presumptive_diagnoses_from_personal_history,
    get_presumptive_diagnoses_from_tests,
    get_presumptive_diagnoses_from_vital_signs,
    get_tests_to_order_from_symptoms,
    get_tests_to_order_from_personal_history,
    get_tests_to_order_from_vital_signs,
)

patient_router = APIRouter()

# ────────────────────────── Small helpers ──────────────────────────


def calculate_age(dob: date) -> int:
    today = date.today()
    return today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))


def map_patient_basic(p: Patient) -> PatientBasic:
    """Return only the small (‘basic’) subset of patient fields."""
    return PatientBasic(
        id=p.patient_id,
        first_name=p.first_name,
        last_name=p.last_name,
        gender=p.gender,
        dob=p.dob,
    )


# (big map_patient() unchanged – omitted for brevity;
#  keep the existing implementation you already have)


# ────────────────────────── SEARCH  (unchanged) ──────────────────────────

@patient_router.get(
    "/patients/search",
    response_model=List[PatientBasic],
    summary="Search patients by name and/or date of birth",
)
def search_patients(
        first_name: Optional[str] = Query(None),
        last_name:  Optional[str] = Query(None),
        dob:        Optional[date] = Query(None),
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor),
):
    patient_ids = (
        db.query(DoctorPatient.patient_id)
        .filter_by(doctor_id=doctor.id)
        .subquery()
    )
    query = db.query(Patient).filter(Patient.patient_id.in_(patient_ids))

    if first_name:
        query = query.filter(Patient.first_name.ilike(f"{first_name}%"))
    if last_name:
        query = query.filter(Patient.last_name.ilike(f"{last_name}%"))
    if dob:
        query = query.filter(Patient.dob == dob)

    return [map_patient_basic(p) for p in query.limit(50).all()]


# ────────────────────────── LIST  (/patients) ──────────────────────────

@patient_router.get(
    "/patients",
    response_model=List[Union[PatientResponse, PatientBasic]],
    summary="List *all* patients for the doctor (full or basic view).",
)
def read_my_patients(
        basic: bool = Query(False, description="If true, return only PatientBasic objects."),
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor),
):
    links = db.query(DoctorPatient).filter_by(doctor_id=doctor.id).all()
    patient_ids = [link.patient_id for link in links]
    patients = db.query(Patient).filter(Patient.patient_id.in_(patient_ids)).all()

    if basic:
        return [map_patient_basic(p) for p in patients]

    # full detail:
    full: List[PatientResponse] = []
    for p in patients:
        try:
            full.append(map_patient(p, db))   # ← your existing big mapper
        except Exception as exc:
            # Don’t break the whole list if one patient fails
            print(f"Failed to map patient {p.patient_id}: {exc}")
    return full


# ────────────────────────── SINGLE  (/patients/{id}) ──────────────────────────

@patient_router.get(
    "/patients/{patient_id}",
    response_model=Union[PatientResponse, PatientBasic],
    summary="Get one patient (full or basic).",
)
def read_patient(
        patient_id: int,
        basic: bool = Query(False, description="If true, return only basic fields."),
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor),
):
    """
    * If `basic=true` – return a **PatientBasic** (very small payload).
    * Else – return the full **PatientResponse** as before.
    """
    link = (
        db.query(DoctorPatient)
        .filter_by(doctor_id=doctor.id, patient_id=patient_id)
        .first()
    )
    if not link:
        raise HTTPException(status_code=403, detail="This patient is not assigned to you")

    patient = get_patient_by_id(db, patient_id)
    if not patient:
        raise HTTPException(status_code=404, detail="Patient not found")

    if basic:
        return map_patient_basic(patient)
    return map_patient(patient, db)


# ────────────────────────── CREATE / DELETE / UPDATE  ──────────────────────────
# (unchanged – keep the exact implementations you already had)
# ───────────────────────────────────────────────────────────────────────────────
