from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from models.doctor_patient import DoctorPatient
from core.deps_doctor import get_current_doctor
from typing import List, Optional

from models import Patient
from models.doctor import Doctor
from models.patient_schema import (
    PatientResponse,
    Demographics,
    ContactInfo,
    SocialInfo,
    Symptom,
    PersonalHistory,
    VitalSign,
    PatientTest,
    FollowUpAction,
    Recommendation,
    Referral,
    Risk,
    LifeStyleAdvice,
    PresumptiveDiagnosis,
    TestToOrder,
    PatientCreate,
    PatientBasic,
)
from services.patient_service import (
    get_all_patients,
    get_patient_by_id,
    get_patient_symptoms,
    get_patient_personal_history,
    get_patient_vital_signs,
    get_patient_tests,
    get_follow_up_actions_from_symptoms,
    get_follow_up_actions_from_personal_history,
    get_follow_up_actions_from_tests,
    get_follow_up_actions_from_vital_signs,
    get_recommendations_from_symptoms,
    get_recommendations_from_vital_signs,
    get_recommendations_from_personal_history,
    get_recommendations_from_tests,
    get_referrals_from_symptoms,
    get_referrals_from_personal_history,
    get_referrals_from_tests,
    get_referrals_from_vital_signs,
    get_risks_from_symptoms,
    get_risks_from_personal_history,
    get_risks_from_tests,
    get_risks_from_vital_signs,
    get_lifestyle_advices_from_symptoms,
    get_lifestyle_advices_from_personal_history,
    get_lifestyle_advices_from_vital_signs,
    get_lifestyle_advices_from_tests,
    get_presumptive_diagnoses_from_symptoms,
    get_presumptive_diagnoses_from_personal_history,
    get_presumptive_diagnoses_from_tests,
    get_presumptive_diagnoses_from_vital_signs,
    get_tests_to_order_from_symptoms,
    get_tests_to_order_from_personal_history,
    get_tests_to_order_from_vital_signs
)
from core.deps import get_db
from typing import List
from datetime import date

patient_router = APIRouter()


def calculate_age(dob: date) -> int:
    today = date.today()
    return today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))

def map_patient(patient, db: Session) -> PatientResponse:
    symptoms = get_patient_symptoms(db, patient.patient_id)
    personal_history = get_patient_personal_history(db, patient.patient_id)
    vital_signs_raw = get_patient_vital_signs(db, patient.patient_id)
    patient_tests = get_patient_tests(db, patient.patient_id)

    follow_up_actions_symptoms = get_follow_up_actions_from_symptoms(db, patient.patient_id)
    follow_up_actions_history = get_follow_up_actions_from_personal_history(db, patient.patient_id)
    follow_up_actions_tests = get_follow_up_actions_from_tests(db, patient.patient_id)
    follow_up_actions_vitals = get_follow_up_actions_from_vital_signs(db, patient.patient_id)

    recommendations_from_symptoms = get_recommendations_from_symptoms(db, patient.patient_id)
    recommendations_from_vitals = get_recommendations_from_vital_signs(db, patient.patient_id)
    recommendations_from_history = get_recommendations_from_personal_history(db, patient.patient_id)
    recommendations_from_tests = get_recommendations_from_tests(db, patient.patient_id)

    referrals_from_symptoms = get_referrals_from_symptoms(db, patient.patient_id)
    referrals_from_history = get_referrals_from_personal_history(db, patient.patient_id)
    referrals_from_tests = get_referrals_from_tests(db, patient.patient_id)
    referrals_from_vitals = get_referrals_from_vital_signs(db, patient.patient_id)

    risks_from_symptoms = get_risks_from_symptoms(db, patient.patient_id)
    risks_from_history = get_risks_from_personal_history(db, patient.patient_id)
    risks_from_tests = get_risks_from_tests(db, patient.patient_id)
    risks_from_vitals = get_risks_from_vital_signs(db, patient.patient_id)

    life_style_advices_from_symptoms = get_lifestyle_advices_from_symptoms(db, patient.patient_id)
    lifestyle_advices_from_personal_history = get_lifestyle_advices_from_personal_history(db, patient.patient_id)
    lifestyle_advices_from_vitals = get_lifestyle_advices_from_vital_signs(db, patient.patient_id)
    lifestyle_advices_from_tests = get_lifestyle_advices_from_tests(db, patient.patient_id)

    presumptive_diagnoses_from_symptoms = get_presumptive_diagnoses_from_symptoms(db, patient.patient_id)
    presumptive_diagnoses_from_history = get_presumptive_diagnoses_from_personal_history(db, patient.patient_id)
    presumptive_diagnoses_from_tests = get_presumptive_diagnoses_from_tests(db, patient.patient_id)
    presumptive_diagnoses_from_vital_signs = get_presumptive_diagnoses_from_vital_signs(db, patient.patient_id)

    tests_to_order_from_symptoms = get_tests_to_order_from_symptoms(db, patient.patient_id)
    tests_to_order_from_personal_history = get_tests_to_order_from_personal_history(db, patient.patient_id)
    tests_to_order_from_vitals = get_tests_to_order_from_vital_signs(db, patient.patient_id)


    all_follow_up_actions = {
        f.id: f for f in follow_up_actions_symptoms
                         + follow_up_actions_history
                         + follow_up_actions_tests
                         + follow_up_actions_vitals
    }.values()

    all_recommendations = {
        r.id: r for r in recommendations_from_symptoms
                         + recommendations_from_vitals
                         + recommendations_from_history
                         + recommendations_from_tests
    }.values()

    all_referrals = {
        r.id: r for r in referrals_from_symptoms
                         + referrals_from_history
                         + referrals_from_tests
                         + referrals_from_vitals
    }.values()

    all_risks = {
        r.id: r for r in risks_from_symptoms
                         + risks_from_history
                         + risks_from_tests
                         + risks_from_vitals
    }.values()

    all_lifestyle_advices = {
        a.id: a for a in life_style_advices_from_symptoms
                         + lifestyle_advices_from_personal_history
                         + lifestyle_advices_from_vitals
                         + lifestyle_advices_from_tests
    }.values()

    all_presumptive_diagnoses = {
        d.id: d for d in presumptive_diagnoses_from_symptoms
                         + presumptive_diagnoses_from_history
                         + presumptive_diagnoses_from_tests
                         + presumptive_diagnoses_from_vital_signs
    }.values()

    all_tests_to_order = {
        t.id: t for t in tests_to_order_from_symptoms
                         + tests_to_order_from_personal_history
                         + tests_to_order_from_vitals
    }.values()

    return PatientResponse(
        id=patient.patient_id,
        demographics=Demographics(
            first_name=patient.first_name,
            last_name=patient.last_name,
            gender=patient.gender,
            date_of_birth=patient.dob,
            age=calculate_age(patient.dob),
            ethnicity=patient.ethnicity
        ),
        contact_info=ContactInfo(
            phone=patient.phone,
            email=patient.email
        ),
        social_info=SocialInfo(
            marital_status=patient.marital_status,
            occupation=patient.occupation,
            insurance_provider=patient.insurance_provider,
            address=patient.address
        ),
        symptoms=[
            Symptom(id=s.symptom_id, name=s.name, category=s.category)
            for s in symptoms
        ],
        personal_history=[
            PersonalHistory(id=h.id, name=h.name)
            for h in personal_history
        ],
        vital_signs=[
            VitalSign(
                id=v.vital_sign_id,
                name=v.name,
                category=v.category,
                value=v.value,
                unit=v.unit
            )
            for v in vital_signs_raw
        ],
        tests=[
            PatientTest(
                test_id=t.test_id,
                name=t.name,
                category=t.category,
                value=t.result_value,
                unit=t.units,
                date=t.test_date,
                notes=t.notes
            )
            for t in patient_tests
        ],
        follow_up_actions=[
            FollowUpAction(id=f.id, interval=f.interval, action=f.action)
            for f in all_follow_up_actions
        ],
        recommendations=[
            Recommendation(id=r.id, recommendation=r.recommendation_value)
            for r in all_recommendations
        ],

        referrals=[
            Referral(id=r.id, specialist=r.specialist_name, reason=r.referral_reason)
            for r in all_referrals
        ],

        risks=[
            Risk(id=r.id, value=r.value, reason=r.reason)
            for r in all_risks
        ],

        life_style_advice=[
            LifeStyleAdvice(id=a.id, advice=a.life_style_advice)
            for a in all_lifestyle_advices
        ]

        ,
        presumptive_diagnoses=[
            PresumptiveDiagnosis(id=p.id, diagnosis_name=p.diagnosis_name, confidence_level=p.confidence_level)
            for p in all_presumptive_diagnoses
        ],

        tests_to_order=[
            TestToOrder(id=t.id, test_to_order=t.test_to_order)
            for t in all_tests_to_order
        ]


    )

@patient_router.get("/patients", response_model=List[PatientResponse])
def read_my_patients(
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor)
):
    links = db.query(DoctorPatient).filter_by(doctor_id=doctor.id).all()
    patient_ids = [link.patient_id for link in links]
    patients = db.query(Patient).filter(Patient.patient_id.in_(patient_ids)).all()
    result = []
    for p in patients:
        try:
            mapped = map_patient(p, db)
            result.append(mapped)
        except Exception as e:
            print(f"Failed to map patient {p.patient_id}: {e}")
    return result

@patient_router.get("/patients/{patient_id}", response_model=PatientResponse)
def read_patient(
        patient_id: int,
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor)
):
    link = db.query(DoctorPatient).filter_by(doctor_id=doctor.id, patient_id=patient_id).first()
    if not link:
        raise HTTPException(status_code=403, detail="This patient is not assigned to you")

    patient = get_patient_by_id(db, patient_id)
    if not patient:
        raise HTTPException(status_code=404, detail="Patient not found")
    return map_patient(patient, db)
    patient = get_patient_by_id(db, patient_id)
    if not patient:
        raise HTTPException(status_code=404, detail="Patient not found")
    return map_patient(patient, db)

@patient_router.post("/patients", summary="Create a new patient", description="Add a new patient with basic demographics and optional details.")
def create_patient(
        data: PatientCreate,
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor)  # doctor must be logged in
):
    new_patient = Patient(
        first_name=data.first_name,
        last_name=data.last_name,
        gender=data.gender,
        dob=data.dob,
        ethnicity=data.ethnicity,
        phone=data.phone,
        email=data.email,
        marital_status=data.marital_status,
        occupation=data.occupation,
        insurance_provider=data.insurance_provider,
        address=data.address
    )
    db.add(new_patient)
    db.commit()
    db.refresh(new_patient)

    # Save relation in doctor_patient table
    link = DoctorPatient(doctor_id=doctor.id, patient_id=new_patient.patient_id)
    db.add(link)
    db.commit()

    return {
        "message": "Patient created successfully",
        "patient_id": new_patient.patient_id
    }

@patient_router.delete("/patients/{patient_id}", summary="Delete a patient", description="Only deletes if the patient belongs to the logged-in doctor.")
def delete_patient(
        patient_id: int,
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor)
):
    link = db.query(DoctorPatient).filter_by(doctor_id=doctor.id, patient_id=patient_id).first()
    if not link:
        raise HTTPException(status_code=403, detail="This patient is not assigned to you")

    # Delete patient link and then patient record
    db.delete(link)

    patient = db.query(Patient).filter(Patient.patient_id == patient_id).first()
    if patient:
        db.delete(patient)

    db.commit()
    return {"message": "Patient deleted successfully"}

@patient_router.put("/patients/{patient_id}", summary="Update a patient", description="Only updates if the patient belongs to the logged-in doctor.")
def update_patient(
        patient_id: int,
        data: PatientCreate,
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor)
):
    link = db.query(DoctorPatient).filter_by(doctor_id=doctor.id, patient_id=patient_id).first()
    if not link:
        raise HTTPException(status_code=403, detail="This patient is not assigned to you")

    patient = db.query(Patient).filter(Patient.patient_id == patient_id).first()
    if not patient:
        raise HTTPException(status_code=404, detail="Patient not found")

    patient.first_name = data.first_name
    patient.last_name = data.last_name
    patient.gender = data.gender
    patient.dob = data.dob
    patient.ethnicity = data.ethnicity
    patient.phone = data.phone
    patient.email = data.email
    patient.marital_status = data.marital_status
    patient.occupation = data.occupation
    patient.insurance_provider = data.insurance_provider
    patient.address = data.address

    db.commit()
    db.refresh(patient)

    return {"message": "Patient updated successfully"}

@patient_router.get(
    "/patients/_search",
    response_model=List[PatientBasic],
    summary="Search patients by name and/or date of birth",
)
def search_patients(
        first_name: Optional[str] = Query(None),
        last_name:  Optional[str] = Query(None),
        dob:        Optional[date] = Query(None),
        db: Session = Depends(get_db),
        doctor: Doctor = Depends(get_current_doctor),
):
    patient_ids = (
        db.query(DoctorPatient.patient_id)
        .filter_by(doctor_id=doctor.id)
        .subquery()
    )
    query = db.query(Patient).filter(Patient.patient_id.in_(patient_ids))

    if first_name:
        query = query.filter(Patient.first_name.ilike(f"{first_name}%"))
    if last_name:
        query = query.filter(Patient.last_name.ilike(f"{last_name}%"))
    if dob:
        query = query.filter(Patient.dob == dob)

    results = query.limit(50).all()
    return [
        PatientBasic(
            id=p.patient_id,
            first_name=p.first_name,
            last_name=p.last_name,
            gender=p.gender,
            dob=p.dob,
        )
        for p in results
    ]