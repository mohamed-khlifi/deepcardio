// app/lib/llm.ts

/**
 * A simple on-page Risk record
 */
export interface Risk {
    id: number;
    value: string;
    reason: string;
}

/**
 * What the LLM returns
 */
export interface RiskSummary {
    value: string;   // e.g. "Moderate to High"
    reason: string;  // 20–30 words
    score: number;   // 1–100
}

const OPENAI_KEY = "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";
const OPENAI_ENDPOINT = "https://api.openai.com/v1/chat/completions";
const MODEL = "gpt-4o-mini";

/**
 * Send the raw risks to OpenAI and get back a single summary object.
 * @param risks  the raw risk list from the API
 * @param abortSignal  optional AbortSignal so you can cancel if the user navigates away
 */
export async function summarizeRisks(
    risks: Risk[],
    abortSignal?: AbortSignal
): Promise<RiskSummary | null> {
    if (risks.length === 0) return null;

    const response = await fetch(OPENAI_ENDPOINT, {
        method: "POST",
        signal: abortSignal,
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${OPENAI_KEY}`,
        },
        body: JSON.stringify({
            model: MODEL,
            temperature: 0,                           // deterministic
            response_format: { type: "json_object" }, // guarantee pure JSON
            messages: [
                {
                    role: "system",
                    content:
                        `You are a clinical-risk summariser.\n` +
                        `Given a JSON array named "risks", return **only** a JSON ` +
                        `object with exactly these keys:\n` +
                        `{\n` +
                        `  "value": string,   // Low, Low to Moderate, Moderate, Moderate to High, High\n` +
                        `  "reason": string,  // 20-30 words, correct grammar\n` +
                        `  "score": number    // 1-100, make it realistic, depending on risk value and reason\n` +
                        `}`
                },
                { role: "user", content: JSON.stringify({ risks }) }
            ]
        })
    });

    if (!response.ok) {
        console.error(
            `OpenAI ${response.status} ${response.statusText}`,
            await response.text()
        );
        return null;
    }

    const json = await response.json() as {
        choices: { message: { content: string } }[];
    };

    try {
        return JSON.parse(json.choices[0].message.content) as RiskSummary;
    } catch (err) {
        console.error("Couldn’t parse risk summary →", json, err);
        return null;
    }
}
