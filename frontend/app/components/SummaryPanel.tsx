'use client';

import React, { useState, useCallback, useEffect, memo, useMemo } from 'react';
import { useAuth0 } from '@auth0/auth0-react';
import {
    usePatientFollowUpActions,
    usePatientRecommendations, 
    usePatientReferrals,
    usePatientLifestyleAdvices,
    usePatientPresumptiveDiagnoses,
    usePatientTestsToOrder,
    useApiRequest,
    invalidatePatientSummaryCache
} from '@/lib/api-cache';
import {
    ClipboardList,
    FileHeart,
    FlaskConical,
    HeartPulse,
    Repeat,
    Send,
    ShieldCheck,
    Sparkles,
    Pencil,
    Trash2,
    Save,
    X,
    TriangleAlert,
    Activity,
    TrendingUp,
    AlertCircle,
    CheckCircle2,
    Stethoscope,
    Brain,
    Target,
    Users,
    Calendar,
    ClipboardCheck,
    Plus,
    Trash,
    AlertTriangle
} from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
    Card,
    CardHeader,
    CardTitle,
    CardContent,
} from '@/components/ui/card';
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { TooltipProvider, Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import Typewriter from './Typewriter';
import { RiskSummary } from '@/lib/llm';
import { toast } from 'sonner';
import { useRouter } from 'next/navigation';
import AutoGeneratedLabel from './AutoGeneratedLabel';

const API = process.env.NEXT_PUBLIC_API_URL ?? 'http://localhost:8001/api/v1';

type Item = { id: number; label: string; extra?: string; auto_generated?: boolean };

export interface SummaryBuckets {
    risk_summary?: RiskSummary;
    follow_up_actions: Item[];
    recommendations: Item[];
    referrals: Item[];
    life_style_advice: Item[];
    presumptive_diagnoses: Item[];
    tests_to_order: Item[];
}

interface Prediction {
    prediction: number;
    status: string;
    confidence?: number;
}

interface SummaryPanelProps extends SummaryBuckets {
    predictions?: { [model: string]: Prediction };
    vital_signs?: any[];
    tests?: any[];
    patient_id?: number; // Made optional to handle cases where it might be undefined
}

const getCategoryIcon = (category: string) => {
    const categoryMap: { [key: string]: React.ReactNode } = {
        'Follow-up Actions': <Calendar className="w-5 h-5 text-orange-600" />,
        'Recommendations': <ClipboardCheck className="w-5 h-5 text-blue-600" />,
        'Referrals': <Users className="w-5 h-5 text-purple-600" />,
        'Lifestyle Advice': <Target className="w-5 h-5 text-green-600" />,
        'Presumptive Diagnoses': <Brain className="w-5 h-5 text-red-600" />,
        'Tests to Order': <FlaskConical className="w-5 h-5 text-indigo-600" />,
    };
    return categoryMap[category] || <Activity className="w-5 h-5 text-gray-600" />;
};

export const SummaryPanel = memo(function SummaryPanel({ patient_id, ...data }: SummaryPanelProps) {
    const { getAccessTokenSilently } = useAuth0();
    const { deleteData } = useApiRequest();
    const router = useRouter();
    const [editStates, setEditStates] = useState<Record<string, number | null>>({});
    const [isAdding, setIsAdding] = useState<string | false>(false);
    const [derivedPatientId, setDerivedPatientId] = useState<number | null>(patient_id || null);
    const [clearAllModal, setClearAllModal] = useState<{ open: boolean; entityType: string | null }>({ open: false, entityType: null });

    // Data is already transformed from the patient page - use it directly
    const followUpActions = useMemo(() => {
        return (data.follow_up_actions || []).map((item: any) => ({
            id: item.id,
            label: item.label,
            extra: item.extra,
            auto_generated: item.auto_generated || false
        }));
    }, [data.follow_up_actions]);

    const recommendations = useMemo(() => {
        return (data.recommendations || []).map((item: any) => ({
            id: item.id,
            label: item.label,
            auto_generated: item.auto_generated || false
        }));
    }, [data.recommendations]);

    const referrals = useMemo(() => {
        return (data.referrals || []).map((item: any) => ({
            id: item.id,
            label: item.label,
            extra: item.extra,
            auto_generated: item.auto_generated || false
        }));
    }, [data.referrals]);

    const lifestyleAdvices = useMemo(() => {
        return (data.life_style_advice || []).map((item: any) => ({
            id: item.id,
            label: item.label,
            auto_generated: item.auto_generated || false
        }));
    }, [data.life_style_advice]);

    const presumptiveDiagnoses = useMemo(() => {
        return (data.presumptive_diagnoses || []).map((item: any) => ({
            id: item.id,
            label: item.label,
            extra: item.extra,
            auto_generated: item.auto_generated || false
        }));
    }, [data.presumptive_diagnoses]);

    const testsToOrder = useMemo(() => {
        return (data.tests_to_order || []).map((item: any) => ({
            id: item.id,
            label: item.label,
            auto_generated: item.auto_generated || false
        }));
    }, [data.tests_to_order]);

    // Configuration for different entity types
    const entityConfig = {
        'Follow-up Actions': {
            endpoint: 'follow-up-actions',
            data: followUpActions,
            mutate: () => invalidatePatientSummaryCache(derivedPatientId || ''),
            createPayload: (label: string, extra: string) => ({
                patient_id: derivedPatientId,
                action: label,
                interval: extra,
            }),
            updatePayload: (label: string, extra: string) => ({
                action: label,
                follow_up_interval: extra,
                patient_id: derivedPatientId,
            }),
            mapResponse: (item: any) => ({
                id: item.id,
                label: item.action,
                extra: item.interval,
            }),
            hasExtra: true,
            extraLabel: 'Interval (e.g., 2 weeks)',
        },
        'Recommendations': {
            endpoint: 'patient-recommendations',
            data: recommendations,
            mutate: () => invalidatePatientSummaryCache(derivedPatientId || ''),
            createPayload: (label: string, extra: string) => ({
                patient_id: derivedPatientId,
                recommendation: label,
            }),
            updatePayload: (label: string, extra: string) => ({
                recommendation: label,
                patient_id: derivedPatientId,
            }),
            mapResponse: (item: any) => ({
                id: item.id,
                label: item.recommendation,
            }),
            hasExtra: false,
            extraLabel: '',
        },
        'Referrals': {
            endpoint: 'patient-referrals',
            data: referrals,
            mutate: () => invalidatePatientSummaryCache(derivedPatientId || ''),
            createPayload: (label: string, extra: string) => ({
                patient_id: derivedPatientId,
                specialist_name: label,
                referral_reason: extra,
            }),
            updatePayload: (label: string, extra: string) => ({
                specialist_name: label,
                referral_reason: extra,
                patient_id: derivedPatientId,
            }),
            mapResponse: (item: any) => ({
                id: item.id,
                label: item.specialist_name,
                extra: item.referral_reason,
            }),
            hasExtra: true,
            extraLabel: 'Reason',
        },
        'Lifestyle Advice': {
            endpoint: 'patient-lifestyle-advices',
            data: lifestyleAdvices,
            mutate: () => invalidatePatientSummaryCache(derivedPatientId || ''),
            createPayload: (label: string, extra: string) => ({
                patient_id: derivedPatientId,
                life_style_advice: label,
            }),
            updatePayload: (label: string, extra: string) => ({
                life_style_advice: label,
                patient_id: derivedPatientId,
            }),
            mapResponse: (item: any) => ({
                id: item.id,
                label: item.life_style_advice,
            }),
            hasExtra: false,
            extraLabel: '',
        },
        'Presumptive Diagnoses': {
            endpoint: 'patient-presumptive-diagnoses',
            data: presumptiveDiagnoses,
            mutate: () => invalidatePatientSummaryCache(derivedPatientId || ''),
            createPayload: (label: string, extra: string) => ({
                patient_id: derivedPatientId,
                diagnosis_name: label,
                confidence_level: extra,
            }),
            updatePayload: (label: string, extra: string) => ({
                diagnosis_name: label,
                confidence_level: extra,
                patient_id: derivedPatientId,
            }),
            mapResponse: (item: any) => ({
                id: item.id,
                label: item.diagnosis_name,
                extra: item.confidence_level,
            }),
            hasExtra: true,
            extraLabel: 'Confidence Level',
        },
        'Tests to Order': {
            endpoint: 'patient-tests-to-order',
            data: testsToOrder,
            mutate: () => invalidatePatientSummaryCache(derivedPatientId || ''),
            createPayload: (label: string, extra: string) => ({
                patient_id: derivedPatientId,
                test_to_order: label,
            }),
            updatePayload: (label: string, extra: string) => ({
                test_to_order: label,
                patient_id: derivedPatientId,
            }),
            mapResponse: (item: any) => ({
                id: item.id,
                label: item.test_to_order,
            }),
            hasExtra: false,
            extraLabel: '',
        },
    };

    // Derive patient_id from URL if not provided
    useEffect(() => {
        if (!derivedPatientId) {
            const pathParts = window.location.pathname.split('/');
            const idFromUrl = pathParts[pathParts.length - 1];
            const parsedId = parseInt(idFromUrl, 10);
            if (!isNaN(parsedId)) {
                setDerivedPatientId(parsedId);
            }
        }
    }, [derivedPatientId]);

    const startEdit = useCallback((it: Item, entityType: string) => {
        setEditStates(prev => ({ ...prev, [entityType]: it.id }));
    }, []);

    const cancelEdit = useCallback((entityType: string) => {
        setEditStates(prev => ({ ...prev, [entityType]: null }));
    }, []);

    const handleEditSave = useCallback(async (id: number, label: string, extra: string, entityType: string) => {
        if (!derivedPatientId) {
            toast.error('Patient ID is missing');
            return;
        }
        
        const config = entityConfig[entityType as keyof typeof entityConfig];
        if (!config) {
            toast.error('Invalid entity type');
            return;
        }
        
        // Check if this is a catalog item and if there were actual changes
        if (id >= 10000) {
            const originalItem = config.data.find((item: any) => item.id === id);
            if (!originalItem) {
                toast.error('Original item not found');
                return;
            }
            
            // Check if anything actually changed
            const labelChanged = label !== originalItem.label;
            const extraChanged = (extra || '') !== ((originalItem as any).extra || '');
            
            if (!labelChanged && !extraChanged) {
                // No changes made, just close the edit state
                setEditStates(prev => ({ ...prev, [entityType]: null }));
                toast.success('No changes to save');
                return;
            }
        }
        
        try {
            const token = await getAccessTokenSilently();
            const body = config.updatePayload(label, extra);
            const res = await fetch(`${API}/${config.endpoint}/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify(body),
            });
            if (!res.ok) throw new Error(await res.text());
            
            toast.success('Updated successfully');
            
            // Invalidate cache to refresh data
            config.mutate();
            // Also invalidate the main patient endpoint to refresh auto-generated items
            invalidatePatientSummaryCache(derivedPatientId);
            setEditStates(prev => ({ ...prev, [entityType]: null }));
        } catch (err) {
            console.error(err);
            toast.error('Failed to update');
        }
    }, [derivedPatientId, getAccessTokenSilently, entityConfig]);

    const deleteAction = useCallback(async (id: number, entityType: string) => {
        if (!derivedPatientId) {
            toast.error('Patient ID is missing');
            return;
        }
        
        const config = entityConfig[entityType as keyof typeof entityConfig];
        if (!config) {
            toast.error('Invalid entity type');
            return;
        }
        
        try {
            const token = await getAccessTokenSilently();
            
            // Delete directly from the patient-specific table
            const res = await fetch(`${API}/${config.endpoint}/${id}`, {
                method: 'DELETE',
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
            
            if (!res.ok) throw new Error(await res.text());
            
            // Invalidate cache to refresh data
            config.mutate();
            // Also invalidate the main patient endpoint to refresh auto-generated items
            invalidatePatientSummaryCache(derivedPatientId);
            toast.success('Deleted successfully');
            
            if (editStates[entityType] === id) cancelEdit(entityType);
        } catch (err) {
            console.error('Delete error:', err);
            toast.error('Failed to delete');
        }
    }, [derivedPatientId, getAccessTokenSilently, entityConfig, cancelEdit]);

    const handleAddSave = useCallback(async (label: string, extra: string, entityType: string) => {
        if (!derivedPatientId) {
            toast.error('Patient ID is missing');
            return;
        }
        
        const config = entityConfig[entityType as keyof typeof entityConfig];
        if (!config) {
            toast.error('Invalid entity type');
            return;
        }
        
        // Check for duplicates in the current items
        let currentItems: any[] = [];
        switch (entityType) {
            case 'Follow-up Actions':
                currentItems = followUpActions;
                break;
            case 'Recommendations':
                currentItems = recommendations;
                break;
            case 'Referrals':
                currentItems = referrals;
                break;
            case 'Lifestyle Advice':
                currentItems = lifestyleAdvices;
                break;
            case 'Presumptive Diagnoses':
                currentItems = presumptiveDiagnoses;
                break;
            case 'Tests to Order':
                currentItems = testsToOrder;
                break;
            default:
                toast.error('Invalid entity type');
                return;
        }
        
        // Check for duplicates based on entity type
        const isDuplicate = currentItems.some((item: any) => {
            if (entityType === 'Follow-up Actions' || entityType === 'Referrals' || entityType === 'Presumptive Diagnoses') {
                // These have both label and extra fields
                return item.label === label && (item.extra || '') === (extra || '');
            } else {
                // These only have label field
                return item.label === label;
            }
        });
        
        if (isDuplicate) {
            toast.error(`This item already exists in the ${entityType} card`);
            return;
        }
        
        try {
            const token = await getAccessTokenSilently();
            const body = config.createPayload(label, extra);
            const res = await fetch(`${API}/${config.endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify(body),
            });
            if (!res.ok) throw new Error(await res.text());
            
            // Invalidate cache to refresh data
            config.mutate();
            // Also invalidate the main patient endpoint to refresh auto-generated items
            invalidatePatientSummaryCache(derivedPatientId);
            toast.success('Added successfully');
            setIsAdding(false);
        } catch (err) {
            console.error(err);
            toast.error('Failed to add');
        }
    }, [derivedPatientId, getAccessTokenSilently, entityConfig, followUpActions, recommendations, referrals, lifestyleAdvices, presumptiveDiagnoses, testsToOrder]);

    const handleClearAll = useCallback(async (entityType: string) => {
        if (!derivedPatientId) {
            toast.error('Patient ID is missing');
            return;
        }
        
        const config = entityConfig[entityType as keyof typeof entityConfig];
        if (!config) {
            toast.error('Invalid entity type');
            return;
        }
        
        try {
            const token = await getAccessTokenSilently();
            
            // Get the current combined items for this entity type
            let currentItems: any[] = [];
            switch (entityType) {
                case 'Follow-up Actions':
                    currentItems = followUpActions;
                    break;
                case 'Recommendations':
                    currentItems = recommendations;
                    break;
                case 'Referrals':
                    currentItems = referrals;
                    break;
                case 'Lifestyle Advice':
                    currentItems = lifestyleAdvices;
                    break;
                case 'Presumptive Diagnoses':
                    currentItems = presumptiveDiagnoses;
                    break;
                case 'Tests to Order':
                    currentItems = testsToOrder;
                    break;
                default:
                    toast.error('Invalid entity type');
                    return;
            }
            
            if (currentItems.length === 0) {
                toast.info('No items to clear');
                return;
            }
            
            // Delete all items directly from the patient-specific table
            const deletePromises = currentItems.map(async (item: any) => {
                return fetch(`${API}/${config.endpoint}/${item.id}`, {
                    method: 'DELETE',
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });
            });
            
            // Wait for all operations to complete
            const results = await Promise.allSettled(deletePromises);
            
            // Check for any failures
            const failures = results.filter(result => result.status === 'rejected');
            if (failures.length > 0) {
                console.error('Clear all failures:', failures);
                toast.error(`${failures.length} items failed to clear`);
                setClearAllModal({ open: false, entityType: null });
                return;
            }
            
            // Invalidate cache to refresh data
            config.mutate();
            // Also invalidate the main patient endpoint to refresh auto-generated items
            invalidatePatientSummaryCache(derivedPatientId);
            toast.success(`All ${entityType.toLowerCase()} cleared successfully`);
            setClearAllModal({ open: false, entityType: null });
        } catch (err) {
            console.error('Clear all error:', err);
            toast.error('Failed to clear all items');
            setClearAllModal({ open: false, entityType: null });
        }
    }, [derivedPatientId, getAccessTokenSilently, entityConfig, followUpActions, recommendations, referrals, lifestyleAdvices, presumptiveDiagnoses, testsToOrder]);

    const ModernCard = ({
        title,
        icon,
        children,
        isEmpty,
        itemCount,
    }: {
        title: string;
        icon: React.ReactNode;
        children: React.ReactNode;
        isEmpty?: boolean;
        itemCount: number;
    }) => (
        <Card className="group relative overflow-hidden bg-white border-0 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] rounded-2xl backdrop-blur-sm bg-white/95">
            {/* Subtle animated background gradient */}
            <div className="absolute inset-0 bg-gradient-to-br from-blue-50/50 via-transparent to-indigo-50/50 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            
            <CardHeader className="relative bg-gradient-to-r from-slate-50/80 via-blue-50/90 to-indigo-50/80 border-b border-blue-100/60 py-6 backdrop-blur-sm">
                <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-4 text-lg font-semibold text-gray-800">
                        <div className="relative p-3 bg-white rounded-2xl shadow-lg ring-1 ring-blue-100/50 group-hover:shadow-xl group-hover:scale-110 transition-all duration-300">
                            {icon}
                            <div className="absolute inset-0 bg-gradient-to-br from-blue-400/20 to-indigo-400/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                        </div>
                        <div className="flex flex-col">
                            <span className="text-gray-900 group-hover:text-gray-800 transition-colors duration-200">{title}</span>
                            <div className="flex items-center gap-2 mt-1">
                                <span className="text-xs text-gray-500 font-medium bg-gray-100/80 px-2 py-1 rounded-full">
                                    {itemCount} {itemCount === 1 ? 'item' : 'items'}
                                </span>
                                {!isEmpty && (
                                    <div className="flex items-center gap-1">
                                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                                        <span className="text-xs text-green-600 font-medium">Active</span>
                                    </div>
                                )}
                            </div>
                        </div>
                    </CardTitle>
                    <div className="flex items-center gap-3">
                        <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setIsAdding(title)}
                            className="bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 border-blue-200/60 text-blue-700 hover:text-blue-800 transition-all duration-200 rounded-xl shadow-sm hover:shadow-md font-medium px-4 py-2"
                        >
                            <Plus className="w-4 h-4 mr-2" />
                            Add New
                        </Button>
                        {!isEmpty && (
                            <AlertDialog open={clearAllModal.open && clearAllModal.entityType === title} onOpenChange={(open) => setClearAllModal({ open, entityType: open ? title : null })}>
                                <AlertDialogTrigger asChild>
                                    <Button
                                        size="sm"
                                        variant="outline"
                                        className="bg-gradient-to-r from-red-50 to-rose-50 hover:from-red-100 hover:to-rose-100 border-red-200/60 text-red-700 hover:text-red-800 transition-all duration-200 rounded-xl shadow-sm hover:shadow-md font-medium px-4 py-2"
                                    >
                                        <Trash className="w-4 h-4 mr-2" />
                                        Clear All
                                    </Button>
                                </AlertDialogTrigger>
                                <AlertDialogContent className="bg-white border-0 shadow-2xl rounded-2xl">
                                    <AlertDialogHeader>
                                        <AlertDialogTitle className="flex items-center gap-3 text-xl font-semibold text-gray-800">
                                            <div className="p-2 bg-red-100 rounded-lg">
                                                <AlertTriangle className="w-5 h-5 text-red-600" />
                                            </div>
                                            Clear All {title}
                                        </AlertDialogTitle>
                                        <AlertDialogDescription className="text-gray-600 leading-relaxed">
                                            This action will permanently remove all {itemCount} {itemCount === 1 ? 'item' : 'items'} from the "{title}" section. 
                                            This includes both manually created items and auto-generated suggestions. 
                                            This action cannot be undone.
                                        </AlertDialogDescription>
                                    </AlertDialogHeader>
                                    <AlertDialogFooter className="gap-3">
                                        <AlertDialogCancel className="bg-gray-100 hover:bg-gray-200 text-gray-700 border-gray-300 rounded-xl px-6 py-2 font-medium transition-all duration-200">
                                            Cancel
                                        </AlertDialogCancel>
                                        <AlertDialogAction 
                                            onClick={() => handleClearAll(title)}
                                            className="bg-gradient-to-r from-red-500 to-rose-600 hover:from-red-600 hover:to-rose-700 text-white border-0 rounded-xl px-6 py-2 font-medium transition-all duration-200 shadow-lg hover:shadow-xl"
                                        >
                                            <Trash className="w-4 h-4 mr-2" />
                                            Clear All Items
                                        </AlertDialogAction>
                                    </AlertDialogFooter>
                                </AlertDialogContent>
                            </AlertDialog>
                        )}
                    </div>
                </div>
            </CardHeader>
            <CardContent className="relative p-0">
                <div className="max-h-[380px] overflow-y-auto scrollbar-thin scrollbar-thumb-blue-300/50 scrollbar-track-gray-100/50 hover:scrollbar-thumb-blue-400/60">
                    <div className="p-6 space-y-4">
                        {children}
                    </div>
                </div>
                
                {/* Subtle bottom gradient fade */}
                <div className="absolute bottom-0 left-0 right-0 h-6 bg-gradient-to-t from-white/90 to-transparent pointer-events-none"></div>
            </CardContent>
        </Card>
    );

    const Empty = ({ message }: { message: string }) => (
        <div className="flex flex-col items-center justify-center py-16 text-center">
            <div className="relative w-20 h-20 bg-gradient-to-br from-blue-100/80 to-indigo-200/80 rounded-3xl flex items-center justify-center mb-6 shadow-lg group-hover:shadow-xl transition-shadow duration-300">
                <CheckCircle2 className="w-10 h-10 text-blue-400" />
                <div className="absolute inset-0 bg-gradient-to-br from-blue-400/20 to-indigo-400/20 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            </div>
            <p className="text-gray-600 text-sm font-semibold mb-2">{message}</p>
            <p className="text-gray-400 text-xs bg-gray-50/80 px-3 py-1 rounded-full">Click "Add New" to create your first item</p>
        </div>
    );

    // Completely isolated edit form with its own state
    const EditFormComponent = React.memo(({ item, onSave, onCancel, entityType }: { 
        item: Item; 
        onSave: (id: number, label: string, extra: string, entityType: string) => void;
        onCancel: (entityType: string) => void;
        entityType: string;
    }) => {
        const [localLabel, setLocalLabel] = React.useState(item.label);
        const [localExtra, setLocalExtra] = React.useState(item.extra || '');
        const editLabelRef = React.useRef<HTMLInputElement>(null);
        const editExtraRef = React.useRef<HTMLInputElement>(null);
        const formId = React.useMemo(() => `edit-form-${item.id}`, [item.id]);
        
        React.useEffect(() => {
            const timer = setTimeout(() => {
                editLabelRef.current?.focus();
            }, 50);
            return () => clearTimeout(timer);
        }, []);
        
        const handleLabelChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
            setLocalLabel(e.target.value);
        }, []);

        const handleExtraChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
            setLocalExtra(e.target.value);
        }, []);

        const handleSave = React.useCallback(() => {
            onSave(item.id, localLabel, localExtra, entityType);
        }, [item.id, localLabel, localExtra, entityType, onSave]);
        
        const config = entityConfig[entityType as keyof typeof entityConfig];
        const showExtraField = config?.hasExtra;
        
        return (
            <div className="space-y-3" key={formId}>
                <input
                    ref={editLabelRef}
                    id={`${formId}-label`}
                    name={`${formId}-label`}
                    value={localLabel}
                    onChange={handleLabelChange}
                    className="flex h-9 w-full rounded-md border-2 border-blue-300 focus:border-blue-500 bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
                    placeholder="Enter action"
                    autoComplete="off"
                    type="text"
                />
                {showExtraField && (
                    <input
                        ref={editExtraRef}
                        id={`${formId}-extra`}
                        name={`${formId}-extra`}
                        placeholder={config?.extraLabel || "Extra field"}
                        value={localExtra}
                        onChange={handleExtraChange}
                        className="flex h-9 w-full rounded-md border-2 border-blue-300 focus:border-blue-500 bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
                        autoComplete="off"
                        type="text"
                    />
                )}
                <div className="flex gap-2 justify-end">
                    <Button
                        size="sm"
                        onClick={handleSave}
                        className="bg-green-600 hover:bg-green-700"
                    >
                        <Save className="w-4 h-4 mr-1" />
                        Save
                    </Button>
                    <Button
                        size="sm"
                        variant="outline"
                        onClick={() => onCancel(entityType)}
                    >
                        <X className="w-4 h-4 mr-1" />
                        Cancel
                    </Button>
                </div>
            </div>
        );
    });

    const Entry = ({ it, editable, entityType }: { it: Item; editable?: boolean; entityType: string }) => (
        <div className="group relative border border-gray-200/60 rounded-2xl p-5 bg-gradient-to-r from-white via-slate-50/40 to-blue-50/30 shadow-sm hover:shadow-lg transition-all duration-300 hover:border-blue-300/60 hover:bg-gradient-to-r hover:from-blue-50/40 hover:to-indigo-50/30 hover:scale-[1.01]">
            {/* Subtle hover glow effect */}
            <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-400/10 to-indigo-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
            
            {editStates[entityType] === it.id ? (
                <EditFormComponent 
                    item={it} 
                    onSave={handleEditSave}
                    onCancel={cancelEdit}
                    entityType={entityType}
                />
            ) : (
                <div className="relative flex items-start justify-between gap-4">
                    <div className="flex-1">
                        <p className="font-semibold text-gray-900 text-sm leading-relaxed group-hover:text-gray-800 transition-colors duration-200">{it.label}</p>
                        <div className="mt-3 flex flex-wrap gap-2">
                            {it.extra && (
                                <Badge variant="secondary" className="bg-gradient-to-r from-blue-50 to-blue-100/80 text-blue-700 border-blue-200/60 text-xs px-3 py-1 rounded-full font-medium shadow-sm">
                                    {it.extra}
                                </Badge>
                            )}
                            {it.auto_generated && (
                                <AutoGeneratedLabel size="sm" />
                            )}
                        </div>
                    </div>

                    {editable && (
                        <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                            <TooltipProvider>
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => startEdit(it, entityType)}
                                            className="h-9 w-9 p-0 rounded-xl hover:bg-blue-100/80 hover:scale-110 transition-all duration-200 shadow-sm"
                                        >
                                            <Pencil className="w-4 h-4 text-blue-600" />
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" className="bg-gray-900 text-white border-gray-700 text-xs rounded-lg">
                                        <p>Edit action</p>
                                    </TooltipContent>
                                </Tooltip>
                            </TooltipProvider>
                            <TooltipProvider>
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => deleteAction(it.id, entityType)}
                                            className="h-9 w-9 p-0 rounded-xl hover:bg-red-100/80 hover:scale-110 transition-all duration-200 shadow-sm"
                                        >
                                            <Trash2 className="w-4 h-4 text-red-600" />
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent side="top" className="bg-gray-900 text-white border-gray-700 text-xs rounded-lg">
                                        <p>{it.id >= 10000 ? 'Remove item' : 'Delete item'}</p>
                                    </TooltipContent>
                                </Tooltip>
                            </TooltipProvider>
                        </div>
                    )}
                </div>
            )}
        </div>
    );

    // Completely isolated add form with its own state
    const AddFormComponent = React.memo(({ onAdd, onCancel, entityType }: { 
        onAdd: (label: string, extra: string, entityType: string) => void;
        onCancel: () => void;
        entityType: string;
    }) => {
        const [localLabel, setLocalLabel] = React.useState('');
        const [localExtra, setLocalExtra] = React.useState('');
        const addLabelRef = React.useRef<HTMLInputElement>(null);
        const addExtraRef = React.useRef<HTMLInputElement>(null);
        const formId = React.useMemo(() => `add-form-${Date.now()}`, []);
    
        React.useEffect(() => {
            const timer = setTimeout(() => {
                addLabelRef.current?.focus();
            }, 50);
            return () => clearTimeout(timer);
        }, []);

        const handleLabelChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
            setLocalLabel(e.target.value);
        }, []);

        const handleExtraChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
            setLocalExtra(e.target.value);
        }, []);

        const handleAdd = React.useCallback(() => {
            onAdd(localLabel, localExtra, entityType);
        }, [localLabel, localExtra, entityType, onAdd]);
        
        const config = entityConfig[entityType as keyof typeof entityConfig];
        const showExtraField = config?.hasExtra;
    
        return (
            <div className="border-2 border-dashed border-blue-200 rounded-xl p-4 bg-gradient-to-r from-blue-50/50 to-indigo-50/30 shadow-sm transition-all duration-200 mb-3" key={formId}>
                <div className="space-y-3">
                    <input
                        ref={addLabelRef}
                        id={`${formId}-label`}
                        name={`${formId}-label`}
                        value={localLabel}
                        onChange={handleLabelChange}
                        className="flex h-9 w-full rounded-md border-2 border-green-300 focus:border-green-500 bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
                        placeholder="Enter new action"
                        autoComplete="off"
                        type="text"
                    />
                    {showExtraField && (
                        <input
                            ref={addExtraRef}
                            id={`${formId}-extra`}
                            name={`${formId}-extra`}
                            placeholder={config?.extraLabel || "Extra field"}
                            value={localExtra}
                            onChange={handleExtraChange}
                            className="flex h-9 w-full rounded-md border-2 border-green-300 focus:border-green-500 bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
                            autoComplete="off"
                            type="text"
                        />
                    )}
                    <div className="flex gap-2 justify-end">
                        <Button
                            size="sm"
                            onClick={handleAdd}
                            className="bg-green-600 hover:bg-green-700"
                        >
                            <Save className="w-4 h-4 mr-1" />
                            Add
                        </Button>
                        <Button
                            size="sm"
                            variant="outline"
                            onClick={onCancel}
                        >
                            <X className="w-4 h-4 mr-1" />
                            Cancel
                        </Button>
                    </div>
                </div>
            </div>
        );
    });
    

    const latestTests = data.tests ? data.tests.reduce((acc, test) => {
        const existing = acc.find((t: { test_id: any; }) => t.test_id === test.test_id);
        if (!existing || new Date(test.date) > new Date(existing.date)) {
            acc = acc.filter((t: { test_id: any; }) => t.test_id !== test.test_id);
            acc.push(test);
        }
        return acc;
    }, [] as any[]) : [];

    const allBucketsEmpty =
        !data.risk_summary &&
        followUpActions.length === 0 &&
        recommendations.length === 0 &&
        referrals.length === 0 &&
        lifestyleAdvices.length === 0 &&
        presumptiveDiagnoses.length === 0 &&
        testsToOrder.length === 0;

    if (allBucketsEmpty && !data.predictions) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/40">
                <div className="relative bg-gradient-to-r from-blue-600 via-indigo-700 to-purple-800 overflow-hidden">
                    <div className="absolute inset-0 opacity-5">
                        <div className="absolute top-20 left-20 w-32 h-32 border border-white rounded-full"></div>
                        <div className="absolute top-40 right-32 w-24 h-24 border border-white rounded-full"></div>
                    </div>

                    <div className="relative max-w-6xl mx-auto px-6 py-16">
                        <div className="flex items-center gap-6">
                            <div className="p-4 bg-white/15 backdrop-blur-sm rounded-xl border border-white/20">
                                <ClipboardList className="w-12 h-12 text-white" />
                            </div>
                            <div className="text-white">
                                <h1 className="text-4xl font-bold tracking-tight mb-2">
                                    Clinical Summary
                                </h1>
                                <p className="text-blue-100 text-lg">
                                    Comprehensive patient assessment and recommendations
                                </p>
                            </div>
                        </div>
                    </div>

                    <div className="absolute bottom-0 left-0 w-full">
                        <svg viewBox="0 0 1200 120" fill="none" className="w-full h-12">
                            <path d="M0,60 C300,100 600,20 1200,60 L1200,120 L0,120 Z" fill="rgb(248 250 252)" />
                        </svg>
                    </div>
                </div>

                <div className="max-w-4xl mx-auto px-6 -mt-8 relative z-10">
                    <Card className="shadow-lg border-0 bg-white">
                        <CardContent className="p-16 text-center">
                            <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                                <ClipboardList className="w-10 h-10 text-gray-400" />
                            </div>
                            <h3 className="text-xl font-semibold text-gray-800 mb-2">No Summary Data Available</h3>
                            <p className="text-gray-600">Complete patient assessment to generate clinical summary and recommendations.</p>
                        </CardContent>
                    </Card>
                </div>
            </div>
        );
    }

    const getContributingFactors = () => {
        if (!data.vital_signs || !data.tests) return [];
        const hasDisease = data.predictions && Object.values(data.predictions).some(p => p.prediction === 1);
        if (!hasDisease) return [];

        const factors = [];
        const systolicBP = data.vital_signs.find(v => v.name === 'Systolic Blood Pressure')?.value;
        const diastolicBP = data.vital_signs.find(v => v.name === 'Diastolic Blood Pressure')?.value;
        const cholesterol = latestTests.find((t: { name: string; }) => t.name === 'Cholesterol (Total)')?.value;
        const fastingGlucose = latestTests.find((t: { name: string; }) => t.name === 'Fasting Plasma Glucose')?.value;

        if (systolicBP) factors.push(`Systolic Blood Pressure (${systolicBP} mmHg)`);
        if (diastolicBP) factors.push(`Diastolic Blood Pressure (${diastolicBP} mmHg)`);
        if (cholesterol) factors.push(`Cholesterol (${cholesterol} mg/dL)`);
        if (fastingGlucose) factors.push(`Fasting Plasma Glucose (${fastingGlucose} mg/dL)`);

        return factors.length > 0 ? factors : ['No Key Contributing Factors identified'];
    };

    const topPrediction = data.predictions
        ? Object.entries(data.predictions).reduce((top, [model, result]) => {
            const accuracy = (result.confidence ?? 0) * 100;
            if (!top || accuracy > (top[1].confidence ?? 0) * 100) {
                return [model, result, accuracy] as [string, Prediction, number];
            }
            return top;
        }, null as [string, Prediction, number] | null)
        : null;

    const sections = [
        { title: 'Follow-up Actions', data: followUpActions, editable: true },
        { title: 'Recommendations', data: recommendations, editable: true },
        { title: 'Referrals', data: referrals, editable: true },
        { title: 'Lifestyle Advice', data: lifestyleAdvices, editable: true },
        { title: 'Presumptive Diagnoses', data: presumptiveDiagnoses, editable: true },
        { title: 'Tests to Order', data: testsToOrder, editable: true },
    ];

    return (
        <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/40">
            <div className="relative bg-gradient-to-r from-blue-600 via-indigo-700 to-purple-800 overflow-hidden">
                <div className="absolute inset-0 opacity-5">
                    <div className="absolute top-20 left-20 w-32 h-32 border border-white rounded-full"></div>
                    <div className="absolute top-40 right-32 w-24 h-24 border border-white rounded-full"></div>
                    <div className="absolute bottom-20 left-1/3 w-28 h-28 border border-white rounded-full"></div>
                </div>

                <div className="relative max-w-6xl mx-auto px-6 py-16">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-6">
                            <div className="p-4 bg-white/15 backdrop-blur-sm rounded-xl border border-white/20">
                                <Stethoscope className="w-12 h-12 text-white" />
                            </div>
                            <div className="text-white">
                                <h1 className="text-4xl font-bold tracking-tight mb-2">
                                    Clinical Summary & Assessment
                                </h1>
                                <p className="text-blue-100 text-lg">
                                    Comprehensive patient evaluation and care recommendations
                                </p>
                            </div>
                        </div>

                        <div className="hidden lg:flex gap-4">
                            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20">
                                <div className="flex items-center gap-3">
                                    <TrendingUp className="w-6 h-6 text-yellow-300" />
                                    <div className="text-white">
                                        <div className="text-sm text-blue-100">Active Items</div>
                                        <div className="text-2xl font-bold">
                                            {sections.reduce((sum, section) => sum + section.data.length, 0)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div className="absolute bottom-0 left-0 w-full">
                    <svg viewBox="0 0 1200 120" fill="none" className="w-full h-12">
                        <path d="M0,60 C300,100 600,20 1200,60 L1200,120 L0,120 Z" fill="rgb(248 250 252)" />
                    </svg>
                </div>
            </div>

            <div className="max-w-7xl mx-auto px-6 -mt-8 relative z-10">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                    <Card className="shadow-lg border-0 bg-white">
                        <CardHeader className="bg-gradient-to-r from-green-50 to-emerald-50 border-b border-green-100 rounded-t-lg">
                            <CardTitle className="flex items-center gap-3 text-xl font-semibold text-gray-800">
                                <div className="p-2 bg-green-100 rounded-lg">
                                    <ShieldCheck className="w-5 h-5 text-green-600" />
                                </div>
                                Overall Risk Assessment
                                {data.risk_summary && (
                                    <Badge className="bg-green-100 text-green-700 border-green-200 ml-auto">
                                        {data.risk_summary.score}%
                                    </Badge>
                                )}
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="p-6">
                            {data.risk_summary ? (
                                <>
                                    <Progress
                                        value={data.risk_summary.score}
                                        className="mb-4 h-3 [&>div]:bg-gradient-to-r [&>div]:from-green-500 [&>div]:to-emerald-600"
                                    />
                                    <p className="text-center font-semibold text-lg mb-4 text-gray-800">
                                        {data.risk_summary.value}
                                    </p>
                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <p className="text-sm text-gray-700 leading-relaxed">
                                            <Typewriter text={data.risk_summary.reason} speed={50} />
                                        </p>
                                    </div>
                                </>
                            ) : (
                                <Empty message="No risk assessment data available" />
                            )}
                        </CardContent>
                    </Card>

                    <Card className="shadow-lg border-0 bg-white">
                        <CardHeader className="bg-gradient-to-r from-red-50 to-rose-50 border-b border-red-100 rounded-t-lg">
                            <CardTitle className="flex items-center gap-3 text-xl font-semibold text-gray-800">
                                <div className="p-2 bg-red-100 rounded-lg">
                                    <HeartPulse className="w-5 h-5 text-red-600" />
                                </div>
                                Cardiovascular Disease Prediction
                                {topPrediction && (
                                    <Badge className="bg-red-100 text-red-700 border-red-200 ml-auto text-xs">
                                        {topPrediction[2].toFixed(1)}% Accuracy
                                    </Badge>
                                )}
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="p-6">
                            {data.predictions ? (
                                <>
                                    <Progress
                                        value={topPrediction ? topPrediction[2] : 0}
                                        className="mb-4 h-3 [&>div]:bg-gradient-to-r [&>div]:from-red-500 [&>div]:to-rose-600"
                                    />
                                    <p className="text-center font-semibold text-lg mb-4 text-gray-800">
                                        {Object.values(data.predictions).some(p => p.prediction === 1)
                                            ? 'Elevated Risk of Cardiovascular Disease'
                                            : 'Low Risk of Cardiovascular Disease'}
                                    </p>
                                    <div className="bg-gray-50 rounded-lg p-4 mb-4">
                                        <p className="text-sm text-gray-700 mb-4 leading-relaxed">
                                            The predictive model indicates a{' '}
                                            {Object.values(data.predictions).some(p => p.prediction === 1) ? 'high' : 'low'} probability of a cardiovascular event
                                            based on patient data. The highest accuracy prediction has an accuracy of {topPrediction?.[2].toFixed(1)}%.
                                        </p>
                                    </div>
                                    <div>
                                        <h4 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                            <AlertCircle className="w-4 h-4 text-amber-500" />
                                            Key Contributing Factors
                                        </h4>
                                        <div className="space-y-2">
                                            {getContributingFactors().length > 0 ? (
                                                getContributingFactors().map((factor) => (
                                                    <div key={factor} className="flex items-center gap-3 p-2 bg-amber-50 rounded-lg border border-amber-100">
                                                        <TriangleAlert className="w-4 h-4 text-amber-600 flex-shrink-0" />
                                                        <span className="text-sm text-gray-700">{factor}</span>
                                                    </div>
                                                ))
                                            ) : (
                                                <div className="flex items-center justify-center p-4 bg-gray-50 rounded-lg">
                                                    <span className="text-sm text-gray-500">No Key Contributing Factors identified</span>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </>
                            ) : (
                                <Empty message="No prediction data available" />
                            )}
                        </CardContent>
                    </Card>
                </div>

                <Card className="shadow-lg border-0 bg-white mb-8">
                    <CardHeader className="bg-gradient-to-r from-gray-50 to-blue-50 border-b border-gray-100">
                        <CardTitle className="flex items-center gap-3 text-xl font-semibold text-gray-800">
                            <div className="p-2 bg-blue-100 rounded-lg">
                                <ClipboardList className="w-5 h-5 text-blue-600" />
                            </div>
                            Clinical Recommendations & Actions
                        </CardTitle>
                    </CardHeader>
                    <CardContent className="p-8">
                        {/* Modern 3-Row Layout: 2 Cards Per Row */}
                        <div className="space-y-8">
                            {/* Row 1: Follow-up Actions & Recommendations */}
                            <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
                                {sections.slice(0, 2).map((section) => (
                                    <ModernCard
                                        key={section.title}
                                        title={section.title}
                                        icon={getCategoryIcon(section.title)}
                                        isEmpty={section.data.length === 0}
                                        itemCount={section.data.length}
                                    >
                                        {isAdding === section.title && 
                                            <AddFormComponent 
                                                onAdd={handleAddSave}
                                                onCancel={() => setIsAdding(false)}
                                                entityType={section.title}
                                            />
                                        }
                                        {section.data.length ? (
                                            section.data.map((item: any) => (
                                                <Entry key={`${section.title}-${item.id}-${item.label}-${item.extra || ''}`} it={item} editable={section.editable} entityType={section.title} />
                                            ))
                                        ) : (
                                            <Empty message={`No ${section.title.toLowerCase()} recorded`} />
                                        )}
                                    </ModernCard>
                                ))}
                            </div>
                            
                            {/* Row 2: Referrals & Lifestyle Advice */}
                            <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
                                {sections.slice(2, 4).map((section) => (
                                    <ModernCard
                                        key={section.title}
                                        title={section.title}
                                        icon={getCategoryIcon(section.title)}
                                        isEmpty={section.data.length === 0}
                                        itemCount={section.data.length}
                                    >
                                        {isAdding === section.title && 
                                            <AddFormComponent 
                                                onAdd={handleAddSave}
                                                onCancel={() => setIsAdding(false)}
                                                entityType={section.title}
                                            />
                                        }
                                        {section.data.length ? (
                                            section.data.map((item: any) => (
                                                <Entry key={`${section.title}-${item.id}-${item.label}-${item.extra || ''}`} it={item} editable={section.editable} entityType={section.title} />
                                            ))
                                        ) : (
                                            <Empty message={`No ${section.title.toLowerCase()} recorded`} />
                                        )}
                                    </ModernCard>
                                ))}
                            </div>
                            
                            {/* Row 3: Presumptive Diagnoses & Tests to Order */}
                            <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
                                {sections.slice(4, 6).map((section) => (
                                    <ModernCard
                                        key={section.title}
                                        title={section.title}
                                        icon={getCategoryIcon(section.title)}
                                        isEmpty={section.data.length === 0}
                                        itemCount={section.data.length}
                                    >
                                        {isAdding === section.title && 
                                            <AddFormComponent 
                                                onAdd={handleAddSave}
                                                onCancel={() => setIsAdding(false)}
                                                entityType={section.title}
                                            />
                                        }
                                        {section.data.length ? (
                                            section.data.map((item: any) => (
                                                <Entry key={`${section.title}-${item.id}-${item.label}-${item.extra || ''}`} it={item} editable={section.editable} entityType={section.title} />
                                            ))
                                        ) : (
                                            <Empty message={`No ${section.title.toLowerCase()} recorded`} />
                                        )}
                                    </ModernCard>
                                ))}
                            </div>
                        </div>
                    </CardContent>
                </Card>

                <div className="mt-8 text-center py-6">
                    <div className="flex items-center justify-center gap-2 text-gray-500 text-sm">
                        <HeartPulse className="w-4 h-4 text-blue-500" />
                        <span>Evidence-Based Clinical Assessment</span>
                        <span>•</span>
                        <span>Comprehensive Patient Care</span>
                        <ShieldCheck className="w-4 h-4 text-blue-500" />
                    </div>
                </div>
            </div>
        </div>
    );
});