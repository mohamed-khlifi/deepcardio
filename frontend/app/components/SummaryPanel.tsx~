// File: app/components/SummaryPanel.tsx
'use client';

import React, { useState } from 'react';
import {
    ClipboardList,
    FileHeart,
    FlaskConical,
    Repeat,
    Send,
    ShieldCheck,
    Sparkles,
    Pencil,
    Trash2,
} from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import Typewriter from './Typewriter';
import { Button } from '@/components/ui/button';
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogFooter,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { useAuth0 } from '@auth0/auth0-react';
import { toast } from 'sonner';

const API = process.env.NEXT_PUBLIC_API_URL ?? 'http://localhost:8001/api/v1';

/* ------------------------------------------------------------------ */
/*                              types                                 */
/* ------------------------------------------------------------------ */
type Item = { id: number; label: string; extra?: string };

export interface RiskSummary {
    value: string;
    reason: string;
    score: number;
}

export interface SummaryBuckets {
    risk_summary?: RiskSummary;
    follow_up_actions: Item[];
    recommendations: Item[];
    referrals: Item[];
    life_style_advice: Item[];
    presumptive_diagnoses: Item[];
    tests_to_order: Item[];
}

/* ------------------------------------------------------------------ */
/*                         helper components                          */
/* ------------------------------------------------------------------ */
const Card: React.FC<{
    title: string;
    icon: React.ReactNode;
    children: React.ReactNode;
}> = ({ title, icon, children }) => (
    <div className="rounded-2xl border bg-white shadow-sm flex flex-col">
        <header className="flex items-center gap-2 border-b bg-gray-50/70 px-5 py-3 rounded-t-2xl">
            <span className="text-primary">{icon}</span>
            <h3 className="text-sm font-semibold text-primary">{title}</h3>
        </header>
        <div className="px-5 py-4 space-y-3 text-sm text-gray-700 grow max-h-[250px] overflow-y-auto">
            {children}
        </div>
    </div>
);

const Empty = () => (
    <p className="italic text-gray-400 select-none">No data yet.</p>
);

/* ------------------------------------------------------------------ */
/*                Follow-up action row with edit/remove               */
/* ------------------------------------------------------------------ */
function FollowUpActionRow({
                               item,
                               onDelete,
                               onUpdate,
                           }: {
    item: Item;
    onDelete: (id: number) => void;
    onUpdate: (id: number, label: string, extra: string) => void;
}) {
    const [editing, setEditing] = useState(false);
    const [label, setLabel] = useState(item.label);
    const [extra, setExtra] = useState(item.extra ?? '');

    const save = () => {
        if (!label.trim()) return;
        onUpdate(item.id, label.trim(), extra.trim());
        setEditing(false);
    };

    return (
        <div className="group flex items-center gap-3 border border-gray-100 rounded-lg px-3 py-2 bg-gray-50 shadow-sm">
            {editing ? (
                <div className="flex-1 flex flex-col gap-1">
                    <Input
                        value={label}
                        onChange={(e) => setLabel(e.target.value)}
                        placeholder="Action"
                        className="h-8"
                    />
                    <Input
                        value={extra}
                        onChange={(e) => setExtra(e.target.value)}
                        placeholder="Interval"
                        className="h-8"
                    />
                    <div className="flex gap-2 mt-1">
                        <Button size="sm" onClick={save}>
                            Save
                        </Button>
                        <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                                setEditing(false);
                                setLabel(item.label);
                                setExtra(item.extra ?? '');
                            }}
                        >
                            Cancel
                        </Button>
                    </div>
                </div>
            ) : (
                <>
                    <div className="flex-1">
                        <p className="font-medium">{item.label}</p>
                        <p className="text-xs text-gray-500">{`Interval: ${item.extra ?? '—'}`}</p>
                    </div>

                    {/* icons appear on hover */}
                    <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                        <Pencil
                            className="size-4 cursor-pointer hover:text-primary"
                            onClick={() => setEditing(true)}
                        />
                        <Trash2
                            className="size-4 cursor-pointer hover:text-red-600"
                            onClick={() => onDelete(item.id)}
                        />
                    </div>
                </>
            )}
        </div>
    );
}

/* ------------------------------------------------------------------ */
/*                           main export                              */
/* ------------------------------------------------------------------ */
export function SummaryPanel(init: SummaryBuckets) {
    const { getAccessTokenSilently } = useAuth0();

    /* we keep follow-up actions in local state so they mutate live */
    const [follow, setFollow] = useState<Item[]>(init.follow_up_actions);

    /* -------------------------------- handlers ---------------------- */
    const deleteAction = async (id: number) => {
        /* optimistic UI: remove locally first */
        setFollow((prev) => prev.filter((f) => f.id !== id));

        try {
            const token = await getAccessTokenSilently();
            const res = await fetch(`${API}/follow-up-actions/${id}`, {
                method: 'DELETE',
                headers: { Authorization: `Bearer ${token}` },
            });
            if (!res.ok) throw new Error(await res.text());
            toast.success('Deleted');
        } catch (err) {
            console.error(err);
            toast.error('Could not delete');
            /* rollback */
            await reloadFollow();
        }
    };

    const updateAction = async (id: number, label: string, extra: string) => {
        const body = { action: label, interval: extra };
        /* optimistic */
        setFollow((prev) =>
            prev.map((f) => (f.id === id ? { ...f, label, extra } : f))
        );

        try {
            const token = await getAccessTokenSilently();
            const res = await fetch(`${API}/follow-up-actions/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify(body),
            });
            if (!res.ok) throw new Error(await res.text());
            toast.success('Updated');
        } catch (err) {
            console.error(err);
            toast.error('Could not update');
            /* rollback */
            await reloadFollow();
        }
    };

    const reloadFollow = async () => {
        try {
            const token = await getAccessTokenSilently();
            const r = await fetch(`${API}/follow-up-actions/by-patient`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            if (r.ok) setFollow(await r.json());
        } catch {
            /* ignore */
        }
    };

    /* --------------------------- risk card -------------------------- */
    if (
        !init.risk_summary &&
        follow.length === 0 &&
        init.recommendations.length === 0 &&
        init.referrals.length === 0 &&
        init.life_style_advice.length === 0 &&
        init.presumptive_diagnoses.length === 0 &&
        init.tests_to_order.length === 0
    ) {
        return (
            <div className="w-full flex items-center justify-center p-10">
                <p className="text-gray-500 italic">No summary data available yet.</p>
            </div>
        );
    }

    return (
        <>
            {/* ─────────────────── risk summary card ─────────────────── */}
            <div className="lg:w-1/2 w-full bg-white rounded-2xl shadow-sm border p-6 mb-6">
                <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-2">
                        <ShieldCheck className="h-5 w-5 text-primary" />
                        <h2 className="text-lg font-semibold text-primary">Overall Risk</h2>
                    </div>
                    {init.risk_summary ? (
                        <span className="bg-primary/10 text-primary font-semibold px-2 py-1 rounded-lg text-sm">
              {init.risk_summary.score}
            </span>
                    ) : (
                        <span className="text-gray-500 italic">No risk data</span>
                    )}
                </div>

                {init.risk_summary ? (
                    <>
                        <Progress value={init.risk_summary.score} className="mb-4" />
                        <p className="text-center font-medium text-lg mb-2">
                            {init.risk_summary.value}
                        </p>
                        <p className="text-sm text-gray-600">
                            <Typewriter text={init.risk_summary.reason} speed={50} />
                        </p>
                    </>
                ) : (
                    <p className="text-center text-gray-500 italic">
                        No risk data available.
                    </p>
                )}
            </div>

            {/* ─────────────────── rest of the buckets ─────────────────── */}
            <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                {/* Follow-up Actions with edit/delete */}
                <Card title="Follow-up Actions" icon={<Repeat className="size-4" />}>
                    {follow.length ? (
                        follow.map((f) => (
                            <FollowUpActionRow
                                key={f.id}
                                item={f}
                                onDelete={deleteAction}
                                onUpdate={updateAction}
                            />
                        ))
                    ) : (
                        <Empty />
                    )}
                </Card>

                {/* Recommendations */}
                <Card title="Recommendations" icon={<ClipboardList className="size-4" />}>
                    {init.recommendations.length ? (
                        init.recommendations.map((r) => (
                            <p
                                key={r.id}
                                className="border border-gray-100 rounded-lg px-3 py-2 bg-gray-50 shadow-sm"
                            >
                                {r.label}
                            </p>
                        ))
                    ) : (
                        <Empty />
                    )}
                </Card>

                {/* Referrals */}
                <Card title="Referrals" icon={<Send className="size-4" />}>
                    {init.referrals.length ? (
                        init.referrals.map((r) => (
                            <div
                                key={r.id}
                                className="border border-gray-100 rounded-lg px-3 py-2 bg-gray-50 shadow-sm"
                            >
                                <p className="font-medium">{r.label}</p>
                                <p className="text-xs text-gray-500">{`Reason: ${r.extra ?? '—'}`}</p>
                            </div>
                        ))
                    ) : (
                        <Empty />
                    )}
                </Card>

                {/* Lifestyle Advice */}
                <Card title="Lifestyle Advice" icon={<Sparkles className="size-4" />}>
                    {init.life_style_advice.length ? (
                        init.life_style_advice.map((l) => (
                            <p
                                key={l.id}
                                className="border border-gray-100 rounded-lg px-3 py-2 bg-gray-50 shadow-sm"
                            >
                                {l.label}
                            </p>
                        ))
                    ) : (
                        <Empty />
                    )}
                </Card>

                {/* Presumptive Diagnoses */}
                <Card
                    title="Presumptive Diagnoses"
                    icon={<FileHeart className="size-4" />}
                >
                    {init.presumptive_diagnoses.length ? (
                        init.presumptive_diagnoses.map((d) => (
                            <div
                                key={d.id}
                                className="border border-gray-100 rounded-lg px-3 py-2 bg-gray-50 shadow-sm"
                            >
                                <p className="font-medium">{d.label}</p>
                                <p className="text-xs text-gray-500">{`Confidence: ${
                                    d.extra ?? '—'
                                }`}</p>
                            </div>
                        ))
                    ) : (
                        <Empty />
                    )}
                </Card>

                {/* Tests to Order */}
                <Card title="Tests to Order" icon={<FlaskConical className="size-4" />}>
                    {init.tests_to_order.length ? (
                        init.tests_to_order.map((t) => (
                            <p
                                key={t.id}
                                className="border border-gray-100 rounded-lg px-3 py-2 bg-gray-50 shadow-sm"
                            >
                                {t.label}
                            </p>
                        ))
                    ) : (
                        <Empty />
                    )}
                </Card>
            </div>
        </>
    );
}
